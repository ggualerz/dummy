input {
  tcp {
  port => 6514
  mode => "server"
  codec => line
  ssl_enable => true
  ssl_certificate_authorities => "/ssl/CA.crt"
  ssl_cert => "/ssl/localhost.crt" #Localhost because docker driver cnx on this hostname
  ssl_key => "/ssl/localhost.key" #Localhost because docker driver cnx on this hostname
  ssl_client_authentication => "required" #Use mTLS for auth clients, authorize only client who have a cert signed by this CA
 }
}

filter {
	#Remove ANSI escape code (Color shit)
	mutate {gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", ""]}
	# Docker Syslog header grok (it stop at the -)
	grok{
		match => {
			"message" => ['<%{NUMBER:priority}>%{MONTH:month} +%{POSINT:day} %{TIME:time} %{WORD:docker_tag}\[%{NUMBER:pid}]: %{GREEDYDATA:raw_message}']
		}
	}
		# Traefik Grok
		if [docker_tag] == "traefik" {
			#Traefik standard logs
			if [priority] == "27" {
				grok {
					match => {
						"raw_message" => ['%{TIMESTAMP_ISO8601} %{WORD:log_level} %{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
			#Traefik access logs
			else if [priority] == "30" {
				grok {
					match => {
						"raw_message" => ['%{IP:client_ip} - %{USERNAME:user_auth} \[%{MONTHDAY}/%{MONTH}/%{YEAR:year}:%{TIME} +%{NUMBER}\] "%{WORD:http_method} %{URIPATHPARAM:http_request} %{WORD}/%{NUMBER:http_version}" %{NUMBER:http_status} %{NUMBER:http_response_size} "-" "-" %{NUMBER} "%{DATA:target_service}" "%{DATA:target_service_uri}" %{NUMBER:http_response_time_ms}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
		}
		# PostgreSQL Grok
		if [docker_tag] == "postgresql" {
			if [priority] == "27" {
				grok {
					match => {
						"raw_message" => ['%{YEAR:year}-%{MONTHNUM}-%{MONTHDAY} %{TIME} %{WORD} \[%{NUMBER}\] %{WORD:log_level}: %{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
			else if [priority] == "30" {
				grok {
					match => {
						"raw_message" => ['%{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
		}
		# Gunicorn Grok
		if [docker_tag] == "gunicorn" {
			if [priority] == "27" {
				grok {
					match => {
						"raw_message" => ['\[%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME} %{NUMBER}\] \[%{NUMBER}\] \[%{WORD:log_level}\] %{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
			else if [priority] == "30" {
				grok {
					match => {
						"raw_message" => ['%{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
		}
		# Nginx Grok
		if [docker_tag] == "nginx" {
			#nginx standard logs
			if [priority] == "27" {
				grok {
					match => {
						"raw_message" => ['%{TIMESTAMP_ISO8601} %{WORD:log_level} %{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
			#nginx access logs
			else if [priority] == "30" {
				grok {
					match => {
						"raw_message" => ['%{IP:client_ip} - %{USERNAME:user_auth} \[%{MONTHDAY}/%{MONTH}/%{YEAR:year}:%{TIME} +%{NUMBER}\] "%{WORD:http_method} %{URIPATHPARAM:http_request} %{WORD}/%{NUMBER:http_version}" %{NUMBER:http_status} %{NUMBER:http_response_size} "-" "-" %{NUMBER} "%{DATA:target_service}" "%{DATA:target_service_uri}" %{NUMBER:http_response_time_ms}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
		}
		# Nextjs Grok
		if [docker_tag] == "nextjs" {
			if [priority] == "30" {
				grok {
					match => {
						"raw_message" => ['%{GREEDYDATA:log_message}']
					}
				}
				mutate { remove_field => [ "raw_message"] }
			}
		}
	}
}

output {
   elasticsearch {
   hosts => "https://elasticsearch:9200"
   index => "transcendence-%{+YYYY.MM.DD}"
   cacert => "/ssl/CA.crt"
   user => "elastic"
   password => "${ELASTIC_PASSWORD}"
   ssl => true
 }
#  stdout { codec => rubydebug }  # For debugging purposes
}
